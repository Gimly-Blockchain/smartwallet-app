import { JSONWebToken } from 'jolocom-lib/js/interactionTokens/JSONWebToken'
import { PaymentRequest } from 'jolocom-lib/js/interactionTokens/paymentRequest'
import { JolocomLib } from 'jolocom-lib'
import { Linking } from 'react-native'
import { assembleRequestSummary, cancelSSO } from 'src/actions/sso'
import { ThunkDispatch } from '../../store'
import { RootState } from '../../reducers'
import { BackendMiddleware } from '../../backendMiddleware'
import { AppError } from '../../lib/errors'
import ErrorCode from '../../lib/errorCodes'
import { IdentitySummary, PaymentRequestSummary } from './types'

/**
 * Given an authentication request JWT will return a {@link PaymentRequestSummary}
 * to be used by the {@link PaymentConsentContainer}.
 * @param paymentRequest - the interaction token received from the counterparty
 * @param requester - a summary of the requester's identity
 * @returns a parsed payment request summary
 */

export const paymentRequestSummary = (
  paymentRequest: JSONWebToken<PaymentRequest>,
  requester: IdentitySummary,
): PaymentRequestSummary => ({
  receiver: {
    did: paymentRequest.issuer,
    address: paymentRequest.interactionToken.transactionOptions.to as string,
  },
  callbackURL: paymentRequest.interactionToken.callbackURL,
  amount: paymentRequest.interactionToken.transactionOptions.value,
  description: paymentRequest.interactionToken.description,
  ...assembleRequestSummary(paymentRequest, requester),
})

/**
 * @TODO Sending the response should be moved out of this function
 * @TODO identity wallet can be moved out, and this can return the attrs to create the response
 *   then it's not a thunk action
 * Given an {@link PaymentRequestSummary}, generates and sends an encoded
 * {@link JSONWebToken<PaymentResponse>} authentication response
 * @param isDeepLinkInteraction
 * @param paymentDetails - request summary, i.e. generated by {@link paymentRequestSummary}
 */

export const prepareAndSendPaymentResponse = (
  isDeepLinkInteraction: boolean,
  paymentDetails: PaymentRequestSummary,
) => async (
  dispatch: ThunkDispatch,
  getState: () => RootState,
  backendMiddleware: BackendMiddleware,
) => {
  const { identityWallet } = backendMiddleware
  const { callbackURL, requestJWT } = paymentDetails

  // add loading screen here
  const password = await backendMiddleware.keyChainLib.getPassword()
  const decodedPaymentRequest = JolocomLib.parse.interactionToken.fromJWT<
    PaymentRequest
  >(requestJWT)
  const txHash = await identityWallet.transactions.sendTransaction(
    decodedPaymentRequest.interactionToken,
    password,
  )
  const response = await identityWallet.create.interactionTokens.response.payment(
    { txHash },
    password,
    decodedPaymentRequest,
  )

  if (isDeepLinkInteraction) {
    const callback = `${callbackURL}/${response.encode()}`
    if (!(await Linking.canOpenURL(callback))) {
      throw new AppError(ErrorCode.DeepLinkUrlNotFound)
    }

    return Linking.openURL(callback).then(() => dispatch(cancelSSO))
  } else {
    return fetch(callbackURL, {
      method: 'POST',
      body: JSON.stringify({ token: response.encode() }),
      headers: { 'Content-Type': 'application/json' },
    }).then(() => dispatch(cancelSSO))
  }
}
