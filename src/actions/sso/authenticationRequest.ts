import { Authentication } from 'jolocom-lib/js/interactionTokens/authentication'
import { assembleRequestSummary, cancelSSO } from '.'
import { Linking } from 'react-native'
import { JolocomLib } from 'jolocom-lib'
import { ThunkAction } from '../../store'
import { AppError } from '../../lib/errors'
import ErrorCode from '../../lib/errorCodes'
import { AuthenticationRequestSummary, IdentitySummary } from './types'
import { JSONWebToken } from 'jolocom-lib/js/interactionTokens/JSONWebToken'

/**
 * Given an authentication request JWT will return a {@link AuthenticationRequestSummary}
 * to be used by the {@link AuthenticationConsentContainer}.
 * @param authRequest - the interaction token received from the counterparty
 * @param requester - a summary of the requester's identity
 * @returns a parsed authentication request summary
 */

export const authRequestSummary = (
  authRequest: JSONWebToken<Authentication>,
  requester: IdentitySummary,
): AuthenticationRequestSummary => ({
  description: authRequest.interactionToken.description,
  callbackURL: authRequest.interactionToken.callbackURL,
  ...assembleRequestSummary(authRequest, requester),
})

/**
 * @TODO Sending the response should be moved out of this function
 * @TODO identity wallet can be moved out, and this can return the attrs to create the response
 *   then it's not a thunk action
 * Given an {@link AuthenticationRequestSummary}, generates and sends an encoded
 * {@link JSONWebToken<Authentication>} authentication response
 * @param isDeepLinkInteraction
 * @param authenticationDetails - request summary, i.e. generated by {@link authRequestSummary}
 */

export const prepareAndSendAuthenticationResponse = (
  isDeepLinkInteraction: boolean,
  authenticationDetails: AuthenticationRequestSummary,
): ThunkAction => async (dispatch, getState, backendMiddleware) => {
  const { identityWallet } = backendMiddleware

  const { callbackURL, requestJWT, description } = authenticationDetails
  const password = await backendMiddleware.keyChainLib.getPassword()
  const decodedAuthRequest = JolocomLib.parse.interactionToken.fromJWT<
    Authentication
  >(requestJWT)

  const response = await identityWallet.create.interactionTokens.response.auth(
    { callbackURL, description },
    password,
    decodedAuthRequest,
  )

  if (isDeepLinkInteraction) {
    const callback = `${callbackURL}/${response.encode()}`
    if (!(await Linking.canOpenURL(callback))) {
      throw new AppError(ErrorCode.DeepLinkUrlNotFound)
    }
    return Linking.openURL(callback).then(() => dispatch(cancelSSO))
  }

  await fetch(callbackURL, {
    method: 'POST',
    body: JSON.stringify({ token: response.encode() }),
    headers: { 'Content-Type': 'application/json' },
  })

  return dispatch(cancelSSO)
}
